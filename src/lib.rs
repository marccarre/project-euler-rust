extern crate itertools;
extern crate num_integer;

mod iterators;
mod numbers;

use iterators::Fibonacci;
use iterators::Primes;
use itertools::Itertools;
use num::integer;
use num_integer::Integer;
use numbers::is_palindrome;
use numbers::is_prime;
use std::cmp;

/**
 * Problem 1: Multiples of 3 and 5
 * If we list all the natural numbers below 10 that are multiples of 3 or 5, we
 * get 3, 5, 6 and 9. The sum of these multiples is 23.
 * Find the sum of all the multiples of 3 or 5 below 1000.
 */
pub fn problem_0001(n: u32) -> u32 {
    return (1..n).filter(|k| k % 3 == 0 || k % 5 == 0).sum();
}

/**
 * Problem 2: Even Fibonacci numbers
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 *     1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
 */
pub fn problem_0002_imperative(n: u32) -> u32 {
    let (mut i, mut j) = (0, 1);
    let mut fibo = i + j;
    let mut even_sum = 0;
    while fibo < n {
        if fibo % 2 == 0 {
            even_sum += fibo;
        }
        i = j;
        j = fibo;
        fibo = i + j;
    }
    return even_sum;
}

pub fn problem_0002_functional(n: u32) -> u32 {
    Fibonacci::<u32>::new()
        .take_while(|&k| k < n)
        .filter(|&k| k.is_even())
        .sum()
}

/**
 * Problem 3: Largest prime factor
 * The prime factors of 13195 are 5, 7, 13 and 29.
 * What is the largest prime factor of the number 600851475143 ?
 */
pub fn problem_0003(n: u64) -> u64 {
    let mut k = n;
    let mut largest = 1;
    let mut primes = Primes::new(n);
    loop {
        match primes.next() {
            Some(prime) => {
                while k != 1 && k % prime == 0 {
                    k = k / prime;
                    largest = prime;
                }
                if k == 1 {
                    break;
                }
            }
            None => break,
        }
    }
    return cmp::max(largest, k);
}

/**
 * Problem 4: Largest palindrome product
 * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
 * Find the largest palindrome made from the product of two 3-digit numbers.
 */
pub fn problem_0004(x: u32, y: u32) -> u32 {
    // The number n we're interested in typically has the following structure:
    // - for 2-digit numbers forming it:
    //       1000*a + 100*b + 10*b + a = 1001*a + 110*b
    //     = 11*(91*a + 10*b)
    //     = 11*(13*7*a + 5*2*b)
    // - for 3-digit numbers forming it:
    //       100000*a + 10000*b + 1000*c + 100*c + 10*b + a
    //     = 100001*a + 10010*b + 1100*c
    //     = 11*(9091*a + 910*b + 100*c)
    //     = 11*(9091*a + 13*7*5*2*b + 5*5*2*2*c)
    // hence n must be divisible by 11.
    // This helps reduce the search space, and the number of calls to is_palindrome.
    return (x - x / 10..x)
        .cartesian_product(y - y / 10..y)
        .map(|(a, b)| a * b)
        .filter(|x| x % 11 == 0)
        .filter(|x| is_palindrome(x))
        .max()
        .unwrap();
}

/**
 * Problem 5: Smallest multiple
 * 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 * What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */
pub fn problem_0005(n: u32) -> u32 {
    (1..n).fold(1, |x, y| integer::lcm(x, y))
}

/**
 * Problem 6: Sum square difference
 * The sum of the squares of the first ten natural numbers is: 1**2 + 2**2 + ... + 10**2 = 385.
 * The square of the sum of the first ten natural numbers is: (1+2+...+10)**2 = 552 = 3025.
 * Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
 * Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
 */
pub fn problem_0006(n: u32) -> u32 {
    (1..=n).sum::<u32>().pow(2) - (1..=n).map(|x| x.pow(2)).sum::<u32>()
}

/**
 * Problem 7: 10001st prime
 * By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
 * What is the 10 001st prime number?
 */
pub fn problem_0007(n: u32) -> u32 {
    let mut i = 0;
    let mut rank = 0;
    loop {
        if is_prime(i) {
            rank += 1;
        }
        if rank == n {
            return i;
        }
        i += 1;
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_problem_0001() {
        assert_eq!(problem_0001(1000), 233168);
    }

    #[test]
    fn test_problem_0002() {
        assert_eq!(problem_0002_imperative(4_000_000), 4613732);
        assert_eq!(problem_0002_functional(4_000_000), 4613732);
    }

    #[test]
    fn test_problem_0003() {
        assert_eq!(problem_0003(13_195), 29);
        assert_eq!(problem_0003(600_851_475_143), 6857);
    }

    #[test]
    fn test_problem_0004() {
        assert_eq!(problem_0004(100, 100), 9009);
        assert_eq!(problem_0004(1000, 1000), 906609);
    }

    #[test]
    fn test_problem_0005() {
        assert_eq!(problem_0005(10), 2520);
        assert_eq!(problem_0005(20), 232792560);
    }

    #[test]
    fn test_problem_0006() {
        assert_eq!(problem_0006(10), 2640);
        assert_eq!(problem_0006(100), 25164150);
    }

    #[test]
    fn test_problem_0007() {
        assert_eq!(problem_0007(6), 13);
        assert_eq!(problem_0007(10001), 104743);
    }
}
